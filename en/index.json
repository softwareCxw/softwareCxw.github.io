[{"categories":["DoIt"],"content":"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it.","date":"2020-03-03","objectID":"/en/theme-documentation-basics/","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/"},{"categories":["DoIt"],"content":"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:0:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#"},{"categories":["DoIt"],"content":" RequirementsThanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of Hugo (\u003e 0.122.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since WebP Image Processing was introduced in the Hugo 0.122.0, this theme only supports Hugo versions above 0.122.0. Hugo extended version is recommended Since some features of this theme need to processes SCSS to CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:1:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#requirements"},{"categories":["DoIt"],"content":" InstallationThe following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#installation"},{"categories":["DoIt"],"content":" Create Your ProjectHugo provides a new command to create a new website: bash hugo new site my_website cd my_website ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:1","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#create-your-project"},{"categories":["DoIt"],"content":" Install the ThemeThe DoIt theme’s repository is: https://github.com/HEIGE-PCloud/DoIt. You can download the latest release .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: bash git clone https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt Or, create an empty git repository and make this repository a submodule of your site directory: bash git init git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:2","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#install-the-theme"},{"categories":["DoIt"],"content":" Basic ConfigurationThe following is a basic configuration for the DoIt theme: toml baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" title = \"My New Hugo Site\" # Change the default theme to be use when building the site with Hugo theme = \"DoIt\" [params] # DoIt theme version version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:3","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#basic-configuration"},{"categories":["DoIt"],"content":" Create Your First PostHere is the way to create your first post: bash hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:4","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#create-your-first-post"},{"categories":["DoIt"],"content":" Launching the Website LocallyLaunch by using the following command: bash hugo serve Go to http://localhost:1313. Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. bash hugo serve --disableFastRender ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:5","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#launching-the-website-locally"},{"categories":["DoIt"],"content":" Build the WebsiteWhen your site is ready to deploy, run the following command: bash hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more… ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:2:6","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#build-the-website"},{"categories":["DoIt"],"content":" Configuration","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:3:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#configuration"},{"categories":["DoIt"],"content":" Site ConfigurationIn addition to Hugo global configuration and menu configuration, DoIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : toml [params] # DoIt theme version version = \"0.3.X\" # website title title = \"My New Hugo Site\" # site description description = \"This is My New Hugo Site\" # site keywords keywords = [\"Theme\", \"Hugo\"] # site default theme (\"light\", \"dark\", \"black\", \"auto\") defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # enable PWA support enablePWA = false # [Experimental] cache remote images in markdown, more info: https://github.com/HEIGE-PCloud/DoIt/pull/860#issue-1574342372 cacheRemoteImages = true # [Experimental] generate image srcset attribute with hugo image processing feature. optimizeImages = true # [Experimental] resize method for srcset attribute in optimizeImages, more info: https://gohugo.io/content-management/image-processing/#image-processing-options srcsetSmallResizeMethod = \"700x webp Lanczos q75\" srcsetDefaultResizeMethod = \"1200x webp Lanczos q75\" srcsetLargeResizeMethod = \"2000x webp Lanczos q75\" # App icon config # License information license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"DoIt\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use in place of older style .png and .ico files svgFavicon = \"\" # Safari mask icon color iconColor = \"#5bbad5\" # Windows v8-10 tile color tileColor = \"#da532c\" # Search config [params.search] enable = true # type of search engine (\"algolia\", \"fuse\") type = \"fuse\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.search.fuse] # https://fusejs.io/api/options.html isCaseSensitive = false minMatchCharLength = 2 findAllMatches = false location = 0 threshold = 0.3 distance = 100 ignoreLocation = false useExtendedSearch = false ignoreFieldNorm = false [params.image] # cache remote images for better optimisations cacheRemote = true # Image resizing and optimisation optimise = true # Header config [params.header] # Theme change mode # theme change mode (\"switch\", \"select\") themeChangeMode = \"select\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # Hosted on (HTML format is supported) # \u003ca title=\"Github Pages\" href=\"https://docs.github.com/en/pages/\" target=\"_blank\" rel=\"noopener noreffer\"\u003eGitHub Pages\u003c/a\u003e hostedOn = '' # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:3:1","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#site-configuration"},{"categories":["DoIt"],"content":" Favicons, Browserconfig, ManifestIt is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:3:2","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#favicons-browserconfig-manifest"},{"categories":["DoIt"],"content":" Style Customization Note Hugo extended version is necessary for the style customization. DoIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/DoIt/assets/css/_variables.scss to customize the style. Here is a example: scss @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:3:3","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#style-customization"},{"categories":["DoIt"],"content":" Multilingual and i18nDoIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language Switch ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:4:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#multilingual-and-i18n"},{"categories":["DoIt"],"content":" Compatibility Language Hugo Code HTML lang Attribute Theme Docs English en en Simplified Chinese zh-cn zh-CN French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi Arabic ar ar Catalan ca ca Hindi hi hi Indonesian id id Telugu te te Thai th th Turkish tr tr Ukrainian uk uk Traditional Chinese zh-tw zh-tw ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:4:1","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#language-compatibility"},{"categories":["DoIt"],"content":" Basic ConfigurationAfter learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: toml # [en, zh-cn, fr, pl, ...] determines default content language defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # language code, CN only here languageCode = \"zh-CN\" languageName = \"简体中文\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 Then, for each new page, append the language code to the file name. Single file my-page.md is split in two files: in English: my-page.en.md in Chinese: my-page.zh-cn.md Note Be aware that only translated pages are displayed in menu. It’s not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:4:2","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#basic-configuration-1"},{"categories":["DoIt"],"content":" Overwrite Translation StringsTranslations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/DoIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by making a PR to the theme! ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:4:3","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#overwrite-translation-strings"},{"categories":["DoIt"],"content":" Search Based on algolia, searching is supported in DoIt theme. ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:5:0","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#search"},{"categories":["DoIt"],"content":" Output ConfigurationIn order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. toml [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:5:1","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#output-configuration"},{"categories":["DoIt"],"content":" Search ConfigurationBased on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: toml [params.search] enable = true # type of search engine (\"algolia\", \"fuse\") type = \"fuse\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" [params.search.fuse] # https://fusejs.io/api/options.html isCaseSensitive = false minMatchCharLength = 2 findAllMatches = false location = 0 threshold = 0.3 distance = 100 ignoreLocation = false useExtendedSearch = false ignoreFieldNorm = false How to choose search engine? The following is a comparison of two search engines: fuse: simple, no need to synchronize index.json, no limit for contentLength, high performance algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. Algolia Atomic is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json…","date":"2020-03-03","objectID":"/en/theme-documentation-basics/:5:2","series":["getting-start"],"tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/en/theme-documentation-basics/#search-configuration"},{"categories":["DoIt"],"content":"Find out how to create and organize your content quickly and intuitively in DoIt theme.","date":"2020-03-04","objectID":"/en/theme-documentation-content/","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/"},{"categories":["DoIt"],"content":"Find out how to create and organize your content quickly and intuitively in DoIt theme. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:0:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#"},{"categories":["DoIt"],"content":" Contents OrganizationA few suggestions to help you get a good looking site quickly: Keep post pages in the content/posts directory, for example: content/posts/my-first-post.md Keep other pages in the content directory, for example: content/about.md Local resources organization Local Resource Reference There are three ways to reference local resources such as images and music: Using page resources in page bundles. You can reference page resources by the value for Resources.GetMatch or the filepath of the resource relative to the page directory directly. Store resources in the assets directory, which is /assets by default. The filepath of the resource to reference in the post is relative to the assets directory. Store resources in the static directory, which is /static by default. The filepath of the resource to reference in the post is relative to the static directory. The priority of references is also in the above order. There are many places in the theme where the above local resource references can be used, such as links, images, image shortcode, music shortcode and some params in the front matter. Images in page resources or assets directory processing will be supported in the future. It’s really cool! ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:1:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#contents-organization"},{"categories":["DoIt"],"content":" Author SettingsYou are encouraged to create your author profile under mysite/data/authors as author_name.toml. In your profile, you can specify the link, email and name with i18n support. Here is an example for Alice.toml: toml link = \"https://alice.example.com\" email = \"alice@example.com\" name = \"Alice\" [zh-cn] name = \"爱丽丝\" After creating your author profile, you can specify your name in the front matter of your posts. After that, the post will be automatically signed with your name and link, and will be classified according to its author. yaml --- authors: [Alice] --- You can also specify multiple authors for one post. yaml --- authors: [Alice, Bob, Catherine] --- ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:2:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#author-setup"},{"categories":["DoIt"],"content":" Front MatterHugo allows you to add front matter in yaml, toml or json to your content files. Note Not all of the below front matters need to be set in each of your posts. It is necessary only if the front matters and the page part in your site configuration are inconsistent. Here is a front matter example: yaml --- title: \"My First Post\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true authors: [] description: \"\" license: \"\" images: [] tags: [] categories: [] series: [] series_weight: 1 seriesNavigation: true featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true linkToMarkdown: true linkToSource: false linkToEdit: false linkToReport: false rssFullText: false license: '' toc: enable: true auto: true code: copy: true # ... table: sort: true # ... math: enable: true # ... mapbox: accessToken: \"\" # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # located in \"assets/\" # Or # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # located in \"assets/\" # Or # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... outdatedArticleReminder: enable: false # ... sponsor: enable: false # ... related: enable: false count: 5 --- title: the title for the content. subtitle: the subtitle for the content. date: the datetime assigned to this page, which is usually fetched from the date field in front matter, but this behaviour is configurabl in the site configuration. lastmod: the datetime at which the content was last modified. draft: if true, the content will not be rendered unless the --buildDrafts/-D flag is passed to the hugo command. authors: the list of authors for the content. description: the description for the content. license: the special license for this content. images: page images for Open Graph and Twitter Cards. tags: the tags for the content. categories: the categories for the content. series: the series for the content. series_weight: define the position of the post in the series. seriesNavigation: whether to enable series navigation. featuredImage: the featured image for the content. featuredImagePreview: the featured image for the content preview in the home page. hiddenFromHomePage: if true, the content will not be shown in the home page. hiddenFromSearch: if true, the content will not be shown in the search results. twemoji: if true, the content will enable the twemoji. lightgallery: if true, images in the content will be shown as the gallery. ruby: if true, the content will enable the ruby extended syntax. fraction: if true, the content will enable the fraction extended syntax. linkToMarkdown: if true, the footer of the content will be shown the link to the original Markdown file. linkToSource: if false, turn off the view source link in the footer. You can set it to the link to the source file of the post. Use the magic variable {path} to specify the relative path of the post, for example, the {path} for this post is posts/theme-documentation-content/index.en.md. linkToEdit: if false, turn off the edit this page link in the footer. You can set it to the link to edit the page. Use the magic variable {path} to specify the relative path of the post, for example, the {path} for this post is posts/theme-documentation-content/index.en.md. linkToReport: if false, turn off the report issue link in the footer. You can set it to the link to report issues about the page. Use the magic variables: {path} to specify the relative path of the post, for example, the {path} for this post is posts/theme-documentation-content/index.en.md, {title} to specify the title of the post, for example, the {title} for this post is Theme Documentation - Content and {url} to specify the url of the post, for example, the {url} for this post is https://hugodoit.pages.dev/theme-documentation-content/. rssFullText: if true, the full text content","date":"2020-03-04","objectID":"/en/theme-documentation-content/:3:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#front-matter"},{"categories":["DoIt"],"content":" Content SummariesDoIt theme uses the summary of the content to display abstract information in the home page. Hugo can generate summaries of your content. Summary Preview ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#content-summaries"},{"categories":["DoIt"],"content":" Automatic Summary SplittingBy default, Hugo automatically takes the first 70 words of your content as its summary. You may customize the summary length by setting summaryLength in the site configuration. If you are creating content in a CJKChinese/Japanese/Korean language and want to use Hugo’s automatic summary splitting, set hasCJKLanguage to true in your site configuration. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:1","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#automatic-summary-splitting"},{"categories":["DoIt"],"content":" Manual Summary SplittingAlternatively, you may add the \u003c!--more--\u003e summary divider where you want to split the article. Content that comes before the summary divider will be used as that content’s summary. Note Be careful to enter \u003c!--more--\u003e exactly; i.e., all lowercase and with no whitespace. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#manual-summary-splitting"},{"categories":["DoIt"],"content":" Front Matter SummaryYou might want your summary to be something other than the text that starts the article. In this case you can provide a separate summary in the summary variable of the article front matter. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:3","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#front-matter-summary"},{"categories":["DoIt"],"content":" Use Description as SummaryYou might want your description in the description variable of the article front matter as the summary. You may add the \u003c!--more--\u003e summary divider at the start of the article. Keep content that comes before the summary divider empty. Then DoIt theme will use your description as the summary. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:4","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#use-description-as-summary"},{"categories":["DoIt"],"content":" Priority Order of Summary SelectionBecause there are multiple ways in which a summary can be specified it is useful to understand the order. It is as follows: If there is a \u003c!--more--\u003e summary divider present in the article but no content is before the divider, the description will be used as the summary. If there is a \u003c!--more--\u003e summary divider present in the article the text up to the divider will be provided as per the manual summary split method. If there is a summary variable in the article front matter the value of the variable will be provided as per the front matter summary method. The text at the start of the article will be provided as per the automatic summary split method. Note It is not recommended to include rich text block elements in the summary, which will cause typographic errors. Such as code blocks, pictures, tables, etc. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:4:5","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#priority-order-of-summary-selection"},{"categories":["DoIt"],"content":" Basic Markdown SyntaxThis part is shown in the basic markdown syntax page. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:5:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#basic-markdown-syntax"},{"categories":["DoIt"],"content":" Extended Markdown SyntaxDoIt theme has some extended syntax elements for you to write articles. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:0","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#extended-markdown-syntax"},{"categories":["DoIt"],"content":" Emoji SupportThis part is shown in the emoji support page. ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:1","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#emoji-support"},{"categories":["DoIt"],"content":" Mathematical FormulaDoIt theme supports mathematical formulas based on $ \\KaTeX $. Set the followings in your site configuration to enable mathematical formulas. hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block FormulaThe default block delimiters is \\[ \\]: markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] The rendered output looks like this: \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline FormulaThe default inline delimiters is \\( \\): markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) The rendered output looks like this: \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Copy-texCopy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchemmhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] The rendered output looks like this: \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#mathematical-formula"},{"categories":["DoIt"],"content":" Mathematical FormulaDoIt theme supports mathematical formulas based on $ \\KaTeX $. Set the followings in your site configuration to enable mathematical formulas. hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block FormulaThe default block delimiters is \\[ \\]: markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] The rendered output looks like this: \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline FormulaThe default inline delimiters is \\( \\): markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) The rendered output looks like this: \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Copy-texCopy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchemmhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] The rendered output looks like this: \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#block-formula"},{"categories":["DoIt"],"content":" Mathematical FormulaDoIt theme supports mathematical formulas based on $ \\KaTeX $. Set the followings in your site configuration to enable mathematical formulas. hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block FormulaThe default block delimiters is \\[ \\]: markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] The rendered output looks like this: \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline FormulaThe default inline delimiters is \\( \\): markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) The rendered output looks like this: \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Copy-texCopy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchemmhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] The rendered output looks like this: \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#inline-formula"},{"categories":["DoIt"],"content":" Mathematical FormulaDoIt theme supports mathematical formulas based on $ \\KaTeX $. Set the followings in your site configuration to enable mathematical formulas. hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block FormulaThe default block delimiters is \\[ \\]: markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] The rendered output looks like this: \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline FormulaThe default inline delimiters is \\( \\): markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) The rendered output looks like this: \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Copy-texCopy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchemmhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] The rendered output looks like this: \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#copy-tex"},{"categories":["DoIt"],"content":" Mathematical FormulaDoIt theme supports mathematical formulas based on $ \\KaTeX $. Set the followings in your site configuration to enable mathematical formulas. hugo.toml [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]']] inline = [['\\(', '\\)']] [params] [page] [page.math] enable = true blockLeftDelimiter = '\\[' blockRightDelimiter = '\\]' inlineLeftDelimiter = '\\(' inlineRightDelimiter = '\\)' copyTex = true mhchem = true Tip Here is a list of $ \\TeX $ functions supported by $ \\KaTeX $. Block FormulaThe default block delimiters is \\[ \\]: markdown \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] The rendered output looks like this: \\[ c = \\pm\\sqrt{a^2 + b^2} \\] \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] Inline FormulaThe default inline delimiters is \\( \\): markdown \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) The rendered output looks like this: \\( c = \\pm\\sqrt{a^2 + b^2} \\) and \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) Copy-texCopy-tex is an extension for $ \\KaTeX $. By the extension, when selecting and copying $ \\KaTeX $ rendered elements, copies their $ \\LaTeX $ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the LaTeX source code. mhchemmhchem is an extension for $ \\KaTeX $. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. markdown \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] The rendered output looks like this: \\[ \\ce{CO2 + C -\u003e 2 CO} \\] \\[ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} \\] ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:2","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#mhchem"},{"categories":["DoIt"],"content":" Ruby AnnotationAn extended Markdown syntax for ruby annotation is supported in DoIt theme: markdown [Hugo]^(An open-source static site generator) The rendered output looks like this: HugoAn open-source static site generator ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:3","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#ruby"},{"categories":["DoIt"],"content":" Fraction An extended Markdown syntax for fraction is supported in DoIt theme: markdown [Light]/[Dark] [99]/[100] The rendered output looks like this: Light/Dark 90/100 ","date":"2020-03-04","objectID":"/en/theme-documentation-content/:6:4","series":["getting-start"],"tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"/en/theme-documentation-content/#fraction"},{"categories":["DoIt"],"content":"DoIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/"},{"categories":["DoIt"],"content":"DoIt theme provides multiple shortcodes on top of built-in ones in Hugo. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:0:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#"},{"categories":["DoIt"],"content":" style Note Hugo extended version is necessary for style shortcode. style is a shortcode to insert custom style in your post. The style shortcode has two positional parameters. The first one is the custom style content, which supports nesting syntax in SASS and \u0026 referring to this parent HTML element. And the second one is the tag name of the HTML element wrapping the content you want to change the style, and whose default value is div. Example style input: markdown {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} The rendered output looks like this: This is a right-aligned paragraph. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:1:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#style"},{"categories":["DoIt"],"content":" link link shortcode is an alternative to Markdown link syntax. link shortcode can provide some other features and can be used in code blocks. The complete usage of local resource references is supported. The link shortcode has the following named parameters: href [required] (first positional parameter) Destination of the link. content [optional] (second positional parameter) Content of the link, the default value is the value of href parameter. Markdown or HTML format is supported. title [optional] (third positional parameter) title attribute of the HTML a tag, which will be shown when hovering on the link. class [optional] class attribute of the HTML a tag. rel [optional] Additional rel attributes of the HTML a tag. Example link input: markdown {{\u003c link \"https://assemble.io\" \u003e}} Or {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} Or {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} Or {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} The rendered output looks like this: https://assemble.io mailto:contact@revolunet.com Assemble Example link input with a title: markdown {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} Or {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} The rendered output looks like this (hover over the link, there should be a tooltip): Upstage ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:2:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#link"},{"categories":["DoIt"],"content":" image image shortcode is an alternative to figure shortcode. image shortcode can take full advantage of the dependent library lightgallery.js. The complete usage of local resource references is supported. The image shortcode has the following named parameters: src [required] (first positional parameter) URL of the image to be displayed. alt [optional] (second positional parameter) Alternate text for the image if the image cannot be displayed, the default value is the value of the src parameter. Markdown or HTML format is supported. caption [optional] (third positional parameter) Image caption. Markdown or HTML format is supported. title [optional] Image title that will be shown when hovering on the image. class [optional] class attribute of the HTML figure tag. height [optional] height attribute of the image. width [optional] width attribute of the image. linked [optional] Whether the image needs to be hyperlinked, the default value is true. rel [optional] Additional rel attributes of the HTML a tag, if linked parameter is set to true. optimise [optional] Whether to optimise the image, override the site configuration. cacheRemote [optional] Whether to cache the remote image, override the site configuration. Example image input: markdown {{\u003c image src=\"/images/lighthouse.webp\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.webp\" src_l=\"/images/lighthouse-large.webp\" \u003e}} The rendered output looks like this: Lighthouse (image) ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:3:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#image"},{"categories":["DoIt"],"content":" admonitionThe admonition shortcode supports 12 types of banners to help you put a notice on your page. Markdown or HTML format in the content is supported. Note A note banner Abstract An abstract banner Info A info banner Tip A tip banner Success A success banner Question A question banner Warning A warning banner Failure A failure banner Danger A danger banner Bug A bug banner Example An example banner Quote A quote banner The admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, the default value is note. title [optional] (second positional parameter) Title of the admonition banner, the default value is the value of the type parameter. open [optional] (third positional parameter) Whether the content will be expandable by default, the default value is true. Example admonition input: markdown {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} The rendered output looks like this: This is a tip A tip banner ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:4:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#admonition"},{"categories":["DoIt"],"content":" mermaidmermaid is a library helping you to generate diagrams and flowcharts from text, in a similar manner as Markdown. Just insert your mermaid code in the mermaid shortcode and that’s it. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#mermaid"},{"categories":["DoIt"],"content":" FlowchartExample flowchart mermaid input: markdown {{\u003c mermaid \u003e}}graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} The rendered output looks like this: graph LR;\rA[Hard edge] --\u003e|Link text| B(Round edge)\rB --\u003e C{Decision}\rC --\u003e|One| D[Result one]\rC --\u003e|Two| E[Result two]\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#flowchart"},{"categories":["DoIt"],"content":" Sequence DiagramExample sequence diagram mermaid input: markdown {{\u003c mermaid \u003e}}sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} The rendered output looks like this: sequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u003e\u003eJohn: Hello John, how are you?\rloop Healthcheck\rJohn-\u003eJohn: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail...\rJohn--\u003eAlice: Great!\rJohn-\u003eBob: How about you?\rBob--\u003eJohn: Jolly good!\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:2","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#sequence-diagram"},{"categories":["DoIt"],"content":" GANTTExample GANTT mermaid input: markdown {{\u003c mermaid \u003e}}gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} The rendered output looks like this: gantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:3","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#gantt"},{"categories":["DoIt"],"content":" Class DiagramExample class diagram mermaid input: markdown {{\u003c mermaid \u003e}}classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} The rendered output looks like this: classDiagram\rClass01 \u003c|-- AveryLongClass : Cool\rClass03 *-- Class04\rClass05 o-- Class06\rClass07 .. Class08\rClass09 --\u003e C2 : Where am i?\rClass09 --* C3\rClass09 --|\u003e Class07\rClass07 : equals()\rClass07 : Object[] elementData\rClass01 : size()\rClass01 : int chimp\rClass01 : int gorilla\rClass08 \u003c--\u003e C2: Cool label\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:4","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#class-diagram"},{"categories":["DoIt"],"content":" State DiagramExample state diagram mermaid input: markdown {{\u003c mermaid \u003e}}stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} The rendered output looks like this: stateDiagram\r[*] --\u003e Still\rStill --\u003e [*]\rStill --\u003e Moving\rMoving --\u003e Still\rMoving --\u003e Crash\rCrash --\u003e [*]\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:5","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#state-diagram"},{"categories":["DoIt"],"content":" Git GraphExample git graph mermaid input: markdown {{\u003c mermaid \u003e}}gitGraph commit branch hotfix checkout hotfix commit branch develop checkout develop commit id:\"ash\" tag:\"abc\" branch featureB checkout featureB commit type:HIGHLIGHT checkout main checkout hotfix commit type:NORMAL checkout develop commit type:REVERSE checkout featureB commit checkout main merge hotfix checkout featureB commit checkout develop branch featureA commit checkout develop merge hotfix checkout featureA commit checkout featureB commit checkout develop merge featureA branch release checkout release commit checkout main commit checkout release merge main checkout develop merge release {{\u003c /mermaid \u003e}} The rendered output looks like this: gitGraph\rcommit\rbranch hotfix\rcheckout hotfix\rcommit\rbranch develop\rcheckout develop\rcommit id:\"ash\" tag:\"abc\"\rbranch featureB\rcheckout featureB\rcommit type:HIGHLIGHT\rcheckout main\rcheckout hotfix\rcommit type:NORMAL\rcheckout develop\rcommit type:REVERSE\rcheckout featureB\rcommit\rcheckout main\rmerge hotfix\rcheckout featureB\rcommit\rcheckout develop\rbranch featureA\rcommit\rcheckout develop\rmerge hotfix\rcheckout featureA\rcommit\rcheckout featureB\rcommit\rcheckout develop\rmerge featureA\rbranch release\rcheckout release\rcommit\rcheckout main\rcommit\rcheckout release\rmerge main\rcheckout develop\rmerge release\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:6","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#git-graph"},{"categories":["DoIt"],"content":" PieExample pie mermaid input: markdown {{\u003c mermaid \u003e}}pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} The rendered output looks like this: pie\r\"Dogs\" : 386\r\"Cats\" : 85\r\"Rats\" : 15\r","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:5:7","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#pie"},{"categories":["DoIt"],"content":" echartsECharts is a library helping you to generate interactive data visualization. The basic chart types ECharts supports include line series, bar series, scatter series, pie charts, candle-stick series, boxplot series for statistics, map series, heatmap series, lines series for directional information, graph series for relationships, treemap series, sunburst series, parallel series for multi-dimensional data, funnel series, gauge series. And it’s extremely easy to create a combinition of them with ECharts. Just insert your ECharts option in JSON/YAML/TOML format in the echarts shortcode and that’s it. Example echarts input in JSON format: json {{\u003c echarts \u003e}} { \"title\": { \"text\": \"Summary Line Chart\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"Save as Image\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"Email Marketing\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"Affiliate Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"Video Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"Direct View\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"Search Engine\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} The same in YAML format: yaml {{\u003c echarts \u003e}} title: text: Summary Line Chart top: 2% left: center tooltip: trigger: axis legend: data: - Email Marketing - Affiliate Advertising - Video Advertising - Direct View - Search Engine top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: Save as Image xAxis: type: category boundaryGap: false data: - Monday - Tuesday - Wednesday - Thursday - Friday - Saturday - Sunday yAxis: type: value series: - name: Email Marketing type: line stack: Total data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: Affiliate Advertising type: line stack: Total data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: Video Advertising type: line stack: Total data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: Direct View type: line stack: Total data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: Search Engine type: line stack: Total data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} The same in TOML format: toml {{\u003c echarts \u003e}} [title] text = \"Summary Line Chart\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"Save as Image\" [xAxis] type = \"category\" boundaryGap = false data = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ] [yAxis] type = \"value\" [[series]] name = \"Email Marketing\" type = \"line\" stack = \"Total\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"Affiliate Advertising\" type = \"line\" stack = \"Total\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"Video Advertising\" type = \"line\" stack = \"Total\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"Direct View\" type = \"line\" stack = \"Total\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"Search Engine\" type = \"line\" stack = \"Total\" data = [ 8","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:6:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#echarts"},{"categories":["DoIt"],"content":" mapbox Mapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles. The mapbox shortcode has the following named parameters to use Mapbox GL JS: lng [required] (first positional parameter) Longitude of the initial centerpoint of the map, measured in degrees. lat [required] (second positional parameter) Latitude of the initial centerpoint of the map, measured in degrees. zoom [optional] (third positional parameter) The initial zoom level of the map, the default value is 10. marked [optional] (fourth positional parameter) Whether to add a marker at the initial centerpoint of the map, the default value is true. light-style [optional] (fifth positional parameter) Style for the light theme, default value is the value set in the front matter or the site configuration. dark-style [optional] (sixth positional parameter) Style for the dark theme, default value is the value set in the front matter or the site configuration. navigation [optional] Whether to add NavigationControl, default value is the value set in the front matter or the site configuration. geolocate [optional] Whether to add GeolocateControl, default value is the value set in the front matter or the site configuration. scale [optional] Whether to add ScaleControl, default value is the value set in the front matter or the site configuration. fullscreen [optional] Whether to add FullscreenControl, default value is the value set in the front matter or the site configuration. width [optional] Width of the map, the default value is 100%. height [optional] Height of the map, the default value is 20rem. Example simple mapbox input: markdown {{\u003c mapbox 121.485 31.233 12 \u003e}} Or {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} The rendered output looks like this: Example mapbox input with the custom style: markdown {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/navigation-preview-day-v4\" \"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} Or {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/navigation-preview-day-v4\" dark-style=\"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:7:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#mapbox"},{"categories":["DoIt"],"content":" musicThe music shortcode embeds a responsive music player based on APlayer and MetingJS. There are three ways to use the music shortcode. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:8:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#music"},{"categories":["DoIt"],"content":" Custom Music URL The complete usage of local resource references is supported. The music shortcode has the following named parameters by custom music URL: server [required] URL of the custom music. name [optional] Name of the custom music. artist [optional] Artist of the custom music. cover [required] URL of the custom music cover. Example music input by custom music URL: markdown {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.webp\" \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:8:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#custom-music-url"},{"categories":["DoIt"],"content":" Music Platform URL Automatic IdentificationThe music shortcode has one named parameter by music platform URL automatic identification: auto [required] (first positional parameter) URL of the music platform URL for automatic identification, which supports netease, tencent and xiami music platforms. Example music input by music platform URL automatic identification: markdown {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} Or {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:8:2","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#automatic-identification"},{"categories":["DoIt"],"content":" Custom Server, Type and IDThe music shortcode has the following named parameters by custom music platform: server [required] (first positional parameter) [netease, tencent, kugou, xiami, baidu] Music platform. type [required] (second positional parameter) [song, playlist, album, search, artist] Type of the music. id [required] (third positional parameter) Song ID, or playlist ID, or album ID, or search keyword, or artist ID. Example music input by custom music platform: markdown {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} Or {{\u003c music netease song 1868553 \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:8:3","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#custom-server"},{"categories":["DoIt"],"content":" Other ParametersThe music shortcode has other named parameters applying to the above three ways: theme [optional] the Main colour of the music player, the default value is #448aff. fixed [optional] Whether to enable fixed mode, the default value is false. mini [optional] Whether to enable mini mode, the default value is false. autoplay [optional] Whether to autoplay music, the default value is false. volume [optional] Default volume when the player is first opened, which will be remembered in the browser, the default value is 0.7. mutex [optional] Whether to pause other players when this player starts playing, the default value is true. The music shortcode has the following named parameters only applying to the type of music list: loop [optional] [all, one, none] Loop mode of the music list, the default value is none. order [optional] [list, random] Play order of the music list, the default value is list. list-folded [optional] Whether the music list should be folded at first, the default value is false. list-max-height [optional] Max height of the music list, the default value is 340px. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:8:4","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#other-parameters"},{"categories":["DoIt"],"content":" aplayer and audio If you need more advanced controls (custom playlist, mini mode, custom audio type…) over the music player, you can use the aplayer shortcode along with the audio shortcode to reach full power of APlayer.js. The aplayer shortcode is used to create an APlayer instance, and the audio shortcode is used to store data about each music file. Please refer to APlayer.js documentation for all options. Example aplayer and audio input: markdown {{\u003c aplayer fixed=false mini=false autoplay=false theme=\"#b7daff\" loop=\"all\" order=\"list\" preload=\"auto\" volume=0.7 mutex=true lrcType=1 listFolded=false listMaxHeight=\"\" storageName=\"aplayer-setting\" \u003e}} {{\u003c audio name=\"Wavelength\" artist=\"oldmanyoung\" url=\"/music/Wavelength.mp3\" cover=\"/images/Wavelength.webp\" /\u003e}} {{\u003c audio name=\"Wavelength\" artist=\"oldmanyoung\" url=\"/music/Wavelength.mp3\" cover=\"/images/Wavelength.webp\" \u003e}} [00:00.00]APlayer audio1 [00:04.01]is [00:08.02]amazing {{\u003c /audio \u003e}} {{\u003c /aplayer \u003e}} Example aplayer and audio output: Note that these shortcodes cannot be used separately and only named parameters are supported. If you place the LRC inside the audio shortcode, it is passed to the APlayer as a JS string, so the lrcType needs to be set to 1. If you set the link to the LRC file through the lrc parameter, it will be passed as an LRC file, so the lrcType needs to be set to 3. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:9:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#aplayer-and-audio"},{"categories":["DoIt"],"content":" bilibili The bilibili shortcode embeds a responsive video player for bilibili videos. When the video only has one part, only the BV id of the video is required, e.g.: code https://www.bilibili.com/video/BV1Sx411T7QQ Example bilibili input: markdown {{\u003c bilibili BV1Sx411T7QQ \u003e}} Or {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} The rendered output looks like this: When the video has multiple parts, in addition to the BV id of the video, p is also required, whose default value is 1, e.g.: code https://www.bilibili.com/video/BV1TJ411C7An?p=3 Example bilibili input with p: markdown {{\u003c bilibili BV1TJ411C7An 3 \u003e}} Or {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:10:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#bilibili"},{"categories":["DoIt"],"content":" Advanced UsageThe bilibili shortcode supports all named parameters shown in this blog post Here is a list of all named parameters: Parameter Name Position Purpose How to Use id 0 Video BVID, required BV1TJ411C7An p 1 Video part (default 1) Enter a number autoplay 2 Auto-play (default no) 1 or true: Enable, 0 or false: Disable danmaku 3 Default danmaku switch (default on) 1 or true: Enable, 0 or false: Disable muted 4 Default muted (default no) 1 or true: Enable, 0 or false: Disable t 5 Default start time (default 0) Enter the value directly, in seconds The following options seems not to work, but these are still added to the shortcode in case if they work in the future: Parameter Name Position Purpose How to Use hasMuteButton 6 Whether the mute button is displayed (default not displayed) 1 or true: Enable, 0 or false: Disable hideCoverInfo 7 Whether the information under the video cover like play count and danmaku count is displayed (default displayed) 1 or true: Enable, 0 or false: Disable hideDanmakuButton 8 Whether to hide the danmaku button (default not hidden) 1 or true: Enable, 0 or false: Disable noFullScreenButton 9 Whether to hide the full screen button (default displayed) 1 or true: Enable, 0 or false: Disable fjw 10 Whether to start memory play (default on) 1 or true: Enable, 0 or false: Disable Example bilibili input with all named parameters: markdown {{\u003c bilibili BV1TJ411C7An 3 0 0 1 30 0 1 1 1 1 \u003e}} or {{\u003c bilibili id=BV1TJ411C7An p=3 autoplay=0 danmaku=0 muted=1 t=30 hasMuteButton=0 hideCoverInfo=1 hideDanmakuButton=1 noFullScreenButton=1 fjw=1 \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:10:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#advanced-usage"},{"categories":["DoIt"],"content":" typeitThe typeit shortcode provides typing animation based on TypeIt. Just insert your content in the typeit shortcode and that’s it. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:11:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#typeit"},{"categories":["DoIt"],"content":" Simple ContentSimple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: markdown {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: markdown {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:11:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#simple-content"},{"categories":["DoIt"],"content":" Simple ContentSimple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: markdown {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: markdown {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:11:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#id-43"},{"categories":["DoIt"],"content":" Code ContentCode content is allowed and will be highlighted by the named parameter code for the type of code language. Example typeit input with code: markdown {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:11:2","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#code-content"},{"categories":["DoIt"],"content":" Group ContentAll typing animations start at the same time by default. But sometimes you may want to start a set of typeit contents in order. A set of typeit contents with the same value of named parameter group will start typing animation in sequence. Example typeit input with group: markdown {{\u003c typeit group=paragraph \u003e}} **First** this paragraph begins {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **Then** this paragraph begins {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:11:3","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#group-content"},{"categories":["DoIt"],"content":" script script is a shortcode to insert custom Javascript in your post. Note The script content can be guaranteed to be executed in order after all third-party libraries are loaded. So you are free to use third-party libraries. Example script input: markdown {{\u003c script \u003e}} console.log('Just DoIt!'); {{\u003c /script \u003e}} You can see the output in the console of the developer tool. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:12:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#script"},{"categories":["DoIt"],"content":" friend friend is a shortcode to insert a friend link to your friend’s site in your post. The friend shortcode has the following named parameters: name [required] (first positional parameter) Your friend site’s name. url [required] (second positional parameter) The link to your friend site. avatar [required] (third positional parameter) Your friend site’s avatar. bio [required] (fourth positional parameter) A short bio of your friend site. Example friend input: markdown {{\u003c friend \"PCloud\" \"https://github.com/HEIGE-PCloud/\" \"https://avatars.githubusercontent.com/u/52968553?v=4\" \"This is PCloud~💤\" \u003e}} Or {{\u003c friend name=\"PCloud\" url=\"https://github.com/HEIGE-PCloud/\" avatar=\"https://avatars.githubusercontent.com/u/52968553?v=4\" bio=\"This is PCloud~💤\" \u003e}} The rendered output looks like this: PCloud This is PCloud~💤 ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:13:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#friend"},{"categories":["DoIt"],"content":" showcase showcase is a shortcode to insert a showcase of your project in the post. The showcase shortcode has the following named parameters: title [required] (first positional parameter) The title of your showcase. summary [required] (second positional parameter) A brief introduction to your project. image [required] (third positional parameter) The url to the preview image. link [required] (fourth positional parameter) The url to your project page. column [optional] (fifth positional parameter) This parameter defines how many showcases are in each row. The default value is 2, which means there will have two showcases in each row. You can change it to 1, 2 or 3. It’s important to note that when a user visits the website on a small screen, the number of the column may be auto-adjusted to provide the best experience. Example showcase input: markdown {{\u003c showcase title=\"Theme Documentation - Basics\" summary=\"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it.\" image=\"/theme-documentation-basics/featured-image.webp\" link=\"/theme-documentation-basics\" \u003e}} Or {{\u003c showcase \"Theme Documentation - Basics\" \"Discover what the Hugo - DoIt theme is all about and the core-concepts behind it.\" \"/theme-documentation-basics/featured-image.webp\" \"/theme-documentation-basics\" \u003e}} The rendered output looks like this: Theme Documentation - Basics Discover what the Hugo - DoIt theme is all about and the core-concepts behind it. Read more... ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:14:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#showcase"},{"categories":["DoIt"],"content":" tabs and tabtabs and tab are two shortcodes, when used together, can create a tab component for your content. Example tabs and tab input: markdown {{\u003c tabs \u003e}} {{% tab title=\"Tab 1\" %}} ### Title 1 Hi there! #### Title 2 ```py print(\"Hello world!\") ``` {{% /tab %}} {{% tab title=\"Tab 2\" %}} Yet another tab {{% /tab %}} {{\u003c /tabs \u003e}} The rendered output looks like this: Tab 1 Tab 2 ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:15:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#tabs-and-tab"},{"categories":["DoIt"],"content":" Title 1Hi there! Title 2 py print(\"Hello world!\") Yet another tab Due to limitations in the Hugo shortcode system, nested tabs may not work as expected. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:15:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#title-1"},{"categories":["DoIt"],"content":" Title 1Hi there! Title 2 py print(\"Hello world!\") Yet another tab Due to limitations in the Hugo shortcode system, nested tabs may not work as expected. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:15:1","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#title-2"},{"categories":["DoIt"],"content":" fa-iconfa-icon shortcode is used to insert Font Awesome 5 icons. A fa-icon example: markdown {{\u003c fa-icon regular smile \u003e}} The rendered output looks like this: ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:16:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#fa-icon"},{"categories":["DoIt"],"content":" personperson is a shortcode to insert a link to a personal webpage marked up as h-card. The person shortcode has the following named parameters: url [required] (first positional parameter) URL of the personal page. name [required] (second positional parameter) Name of the person. text [optional] (third positional parameter) Text to display as hover tooltip of the link. picture [optional] (fourth positional parameter) A picture to use as person’s avatar. nick [optional] Nickame of the person. Example person input: markdown {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} This renders as   Evgeny Kuznetsov (nekr0z). Without an explicitly given picture, a generic icon is used. This input: markdown {{\u003c person \"https://dillonzq.com/\" Dillon \"author of the LoveIt theme\" \u003e}} This renders as  Dillon. ","date":"2020-03-06","objectID":"/en/theme-documentation-extended-shortcodes/:17:0","series":["getting-start"],"tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"/en/theme-documentation-extended-shortcodes/#person"}]